// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.DAL;

namespace backend.Migrations
{
    [DbContext(typeof(PaintingContext))]
    partial class PaintingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("backend.Models.Author", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("birthDate");

                    b.Property<DateTime>("deathDate");

                    b.Property<string>("description");

                    b.Property<string>("firstName");

                    b.Property<string>("lastName");

                    b.Property<string>("nationality");

                    b.HasKey("id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("backend.Models.Category", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("Paintingid");

                    b.Property<string>("name");

                    b.HasKey("id");

                    b.HasIndex("Paintingid");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("backend.Models.Painting", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AuthorId");

                    b.Property<string>("description");

                    b.Property<float>("height");

                    b.Property<string>("imageUrl");

                    b.Property<string>("owner");

                    b.Property<string>("place");

                    b.Property<string>("title");

                    b.Property<float>("width");

                    b.Property<int>("year");

                    b.HasKey("id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Paintings");
                });

            modelBuilder.Entity("backend.Models.Tag", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("Paintingid");

                    b.Property<string>("name");

                    b.HasKey("id");

                    b.HasIndex("Paintingid");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("backend.Models.Category", b =>
                {
                    b.HasOne("backend.Models.Painting")
                        .WithMany("categories")
                        .HasForeignKey("Paintingid");
                });

            modelBuilder.Entity("backend.Models.Painting", b =>
                {
                    b.HasOne("backend.Models.Author", "author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("backend.Models.Tag", b =>
                {
                    b.HasOne("backend.Models.Painting")
                        .WithMany("tags")
                        .HasForeignKey("Paintingid");
                });
#pragma warning restore 612, 618
        }
    }
}
