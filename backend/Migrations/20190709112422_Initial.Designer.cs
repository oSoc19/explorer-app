// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.DAL;

namespace backend.Migrations
{
    [DbContext(typeof(PaintingContext))]
    [Migration("20190709112422_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("backend.Models.Artist", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("Movementid");

                    b.Property<long?>("Techniqueid");

                    b.Property<DateTime>("birthDate");

                    b.Property<DateTime>("deathDate");

                    b.Property<string>("description");

                    b.Property<string>("firstName");

                    b.Property<string>("lastName");

                    b.Property<string>("nationality");

                    b.HasKey("id");

                    b.HasIndex("Movementid");

                    b.HasIndex("Techniqueid");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("backend.Models.Movement", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description");

                    b.Property<string>("name");

                    b.HasKey("id");

                    b.ToTable("Movement");
                });

            modelBuilder.Entity("backend.Models.Painting", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("authorId");

                    b.Property<string>("description");

                    b.Property<float>("height");

                    b.Property<string>("imageUrl");

                    b.Property<long>("movementId");

                    b.Property<long>("techniqueId");

                    b.Property<string>("title");

                    b.Property<float>("width");

                    b.Property<int>("year");

                    b.HasKey("id");

                    b.HasIndex("authorId");

                    b.HasIndex("movementId");

                    b.HasIndex("techniqueId");

                    b.ToTable("Paintings");
                });

            modelBuilder.Entity("backend.Models.Technique", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description");

                    b.Property<string>("name");

                    b.HasKey("id");

                    b.ToTable("Technique");
                });

            modelBuilder.Entity("backend.Models.Artist", b =>
                {
                    b.HasOne("backend.Models.Movement")
                        .WithMany("artists")
                        .HasForeignKey("Movementid");

                    b.HasOne("backend.Models.Technique")
                        .WithMany("artists")
                        .HasForeignKey("Techniqueid");
                });

            modelBuilder.Entity("backend.Models.Painting", b =>
                {
                    b.HasOne("backend.Models.Artist", "author")
                        .WithMany()
                        .HasForeignKey("authorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.Movement", "movement")
                        .WithMany()
                        .HasForeignKey("movementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.Technique", "technique")
                        .WithMany()
                        .HasForeignKey("techniqueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
